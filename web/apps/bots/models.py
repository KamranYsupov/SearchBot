import asyncio
import os
import sqlite3
from typing import Optional

from asgiref.sync import sync_to_async
from django.conf import settings
from django.db import models
from django.utils.translation import gettext_lazy as _
from aiogram.types import ReplyKeyboardMarkup

from bot.keyboards.reply import get_reply_keyboard
from web.apps.bots.model_mixins import BotTextsMixin
from web.db.model_mixins import (
    AsyncBaseModel, LanguageMixin,
)
from pyrogram import Client


class UserBot(AsyncBaseModel):
    """–ú–æ–¥–µ–ª—å —é–∑–µ—Ä –±–æ—Ç–∞"""
    name = models.CharField(
        _('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
        max_length=100,
        unique=True,
        db_index=True
    )
    api_id = models.CharField(
        max_length=70,
        unique=True,
    )
    api_hash = models.CharField(
        max_length=70,
        unique=True,
    )
    phone_number = models.CharField(
        _('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'),
        max_length=25,
        unique=True,
        db_index=True
    )

    pyrogram_session_string = models.TextField(
        _('–°—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏(pyrogram)'),
        unique=True,
        null=True,
        default=None
    )
    telethon_session_string = models.TextField(
        _('–°—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏(telethon)'),
        unique=True,
        null=True,
        default=None
    )

    chats_count = models.PositiveIntegerField(
        _('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤'),
        default=0,
    )

    def __str__(self):
        return f'–Æ–∑–µ—Ä–±–æ—Ç: {self.name}'


class BotKeyboard(AsyncBaseModel):
    """–ú–æ–¥–µ–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç–∞"""
    name = models.CharField(
        _('–ù–∞–∑–≤–∞–Ω–∏–µ'),
        max_length=150,
        unique=True
    )
    slug = models.CharField(
        _('Slug'),
        max_length=150,
        unique=True,
        db_index=True
    )

    class Meta:
        verbose_name = _('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞')
        verbose_name_plural = _('–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç–∞')

    def __str__(self):
        return self.name

    @staticmethod
    def get_text_name(language: str) -> Optional[str]:
        text_field_name = 'text'
        if language == LanguageMixin.RUSSIAN:
            text_field_name = f'ru_{text_field_name}'
        elif language == LanguageMixin.ENGLISH:
            text_field_name = f'en_{text_field_name}'
        elif language == LanguageMixin.HEBREW:
            text_field_name = f'he_{text_field_name}'
        else:
            return None

        return text_field_name

    @sync_to_async
    def as_markup(self, language: str) -> Optional[ReplyKeyboardMarkup]:
        text_field_name = self.get_text_name(language)
        buttons = self.buttons.all().values_list(
            text_field_name, flat=True
        )
        keyboard = get_reply_keyboard(buttons=buttons)

        return keyboard


class BotKeyboardButton(AsyncBaseModel):
    """–ú–æ–¥–µ–ª—å –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç–∞"""

    class Type:
        REPLY = 'Reply'
        INLINE = 'Inline'

        CHOICES = (
            (REPLY, REPLY),
            (INLINE, INLINE),
        )

    name = models.CharField(
        _('–ù–∞–∑–≤–∞–Ω–∏–µ'),
        max_length=150,
    )
    ru_text = models.CharField(
        _('–¢–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º üá∑üá∫'),
        max_length=150,
    )
    en_text = models.CharField(
        _('–¢–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–∏–ª–π—Å–∫–æ–º üá∫üá∏'),
        max_length=150,
    )
    he_text = models.CharField(
        _('–¢–µ–∫—Å—Ç –Ω–∞ –∏–≤—Ä–∏—Ç–µ üáÆüá±'),
        max_length=150,
    )

    keyboard = models.ForeignKey(
        'bots.BotKeyboard',
        related_name='buttons',
        verbose_name=_('–ö–Ω–æ–ø–∫–∏'),
        on_delete=models.CASCADE
    )

    class Meta:
        verbose_name = _('–ö–Ω–æ–ø–∫–∞')
        verbose_name_plural = _('–ö–Ω–æ–ø–∫–∏ –±–æ—Ç–∞')
        constraints = [
            models.UniqueConstraint(
                fields=[
                    'ru_text',
                    'en_text',
                    'he_text',
                    'keyboard'
                ],
                name='unique_button_text_per_keyboard'
            )
        ]

    def __str__(self):
        return self.name


class RussianBotTexts(BotTextsMixin):
    """Singleton –º–æ–¥–µ–ª—å —Ç–µ–∫—Å—Ç–æ–≤ –±–æ—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º"""

    class Meta:
        verbose_name = '–¢–µ–∫—Å—Ç—ã –±–æ—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º'
        verbose_name_plural = verbose_name


class EnglishBotTexts(BotTextsMixin):
    """Singleton –º–æ–¥–µ–ª—å —Ç–µ–∫—Å—Ç–æ–≤ –±–æ—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"""

    class Meta:
        verbose_name = '–¢–µ–∫—Å—Ç—ã –±–æ—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º'
        verbose_name_plural = verbose_name


class HebrewBotTexts(BotTextsMixin):
    """Singleton –º–æ–¥–µ–ª—å —Ç–µ–∫—Å—Ç–æ–≤ –±–æ—Ç–∞ –Ω–∞ –∏–≤—Ä–∏—Ç–µ"""

    class Meta:
        verbose_name = '–¢–µ–∫—Å—Ç—ã –±–æ—Ç–∞ –Ω–∞ –∏–≤—Ä–∏—Ç–µ'
        verbose_name_plural = verbose_name



